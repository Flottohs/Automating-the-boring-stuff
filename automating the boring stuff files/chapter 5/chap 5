
import logging

#logging module is used to log messages to a file or console. It is useful for debugging and tracking the flow of a program.











logging.basicConfig(level=logging.DEBUG, format=' %(asctime)s -  %(levelname)s -  %(message)s')













































def box_print(symbol, width, height):
    if len(symbol) != 1:
      raise Exception('Symbol must be a single character string.')
    if width <= 2:
      raise Exception('Width must be greater than 2.')
    if height <= 2:
       raise Exception('Height must be greater than 2.')

    print(symbol * width)
    for i in range(height - 2):
        print(symbol + (' ' * (width - 2)) + symbol)
    print(symbol * width)

try:
    box_print('*', 4, 4)
    box_print('O', 20, 5)
    box_print('x', 1, 3)
    box_print('ZZ', 3, 3)
except Exception as err:
    print('An exception happened: ' + str(err))



#raise exceptions are used to indicate that an error has occurred. They can be used to signal that a function has received invalid input or that an operation has failed.
#The raise statement is used to raise an exception. When an exception is raised, the normal flow of the program is interrupted, and the program jumps to the nearest exception handler that can handle the raised exception.#In the box_print function, raise exceptions are used to check the validity of the input parameters. If any of the input parameters are invalid, a raise exception is used to signal that an error has occurred. This allows the caller of the function to handle the error appropriately, rather than allowing the function to continue executing with invalid input.
#the raise statement can raise normal errors like valueerrors, typeerrors, etc. or custom errors that you define yourself by creating a new class that inherits from the built-in Exception class.










#assert statements are used to check that a condition is true. If the condition is false, an AssertionError is raised. Assert statements are typically used for debugging purposes, to check that certain conditions hold true during the execution of a program.



ages = [26,57,92,18,24,55,34,65,77,15,90]
ages.sort()
print(ages)
assert ages[0] <= ages[-1]
print('The first age is less than or equal to the last age, as expected.')